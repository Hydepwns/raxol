name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        elixir: ["1.14", "1.15", "1.16"]
        otp: ["25.0", "26.0", "27.0"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
            node_modules
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-mix-
            ${{ runner.os }}-

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: |
          # Update package lists
          sudo apt-get update

          # Install build dependencies
          sudo apt-get install -y build-essential autoconf m4 libncurses5-dev \
            libssl-dev libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev \
            libpng-dev openssl
        if: runner.os == 'Linux'

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
          mix deps.compile

      - name: Install npm dependencies
        run: npm ci

      - name: Run Tests
        run: |
          # Wait for PostgreSQL to be ready
          for i in {1..30}; do
            if pg_isready -h localhost -p 5433; then
              break
            fi
            echo "Waiting for PostgreSQL to be ready... ($i/30)"
            sleep 1
          done

          # Run tests with coverage and performance monitoring
          mix test --cover --slowest 10
        env:
          MIX_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          TERM: xterm-256color

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cover/excoveralls.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Run security scan only on Linux runners
      - name: Run Security Scan
        uses: snyk/actions/node@master
        if: runner.os == 'Linux'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # On macOS, use the setup action which doesn't require Docker
      - name: Setup Snyk CLI on macOS
        if: runner.os == 'macOS'
        run: |
          # Install Snyk CLI using npm instead of container action
          npm install -g snyk
          echo "Installed Snyk CLI version: $(snyk --version)"

      # Run simplified Snyk scan on macOS (no container scanning)
      - name: Run Security Scan on macOS
        if: runner.os == 'macOS'
        run: |
          # Check if snyk is available and run the scan
          if command -v snyk &> /dev/null; then
            echo "Running Snyk scan with severity threshold high"
            snyk test --severity-threshold=high || echo "Snyk found issues but continuing"
          else
            echo "Skipping Snyk test on macOS due to setup issues"
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Verify Terminal Compatibility
        run: |
          mix run scripts/verify_terminal_compatibility.exs
        env:
          TERM: xterm-256color

      - name: Run Platform-Specific Tests
        run: |
          mix test test/platform_specific
        env:
          PLATFORM: ${{ runner.os }}

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0"
          elixir-version: "1.14"

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check Formatting
        run: mix format --check-formatted

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0"
          elixir-version: "1.14"

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
          mix deps.compile

      - name: Build Docs
        run: |
          mix compile
          mix docs
        env:
          MIX_ENV: test
