name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} | OTP ${{ matrix.otp }} | ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Main testing matrix - most stable combinations
          - os: ubuntu-latest
            elixir: "1.15.7"
            otp: "26.0"
          - os: macos-latest
            elixir: "1.15.7"
            otp: "26.0"

    services:
      # Note: Service containers only work on Linux runners
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-
            ${{ runner.os }}-

      # OS-specific dependencies
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf m4 libncurses5-dev \
            libssl-dev libwxgtk3.2-dev libgl1-mesa-dev libglu1-mesa-dev \
            libpng-dev openssl

      - name: Install macOS Dependencies and Setup PostgreSQL
        if: runner.os == 'macOS'
        run: |
          brew install openssl@1.1
          echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

          # Set up PostgreSQL locally on macOS since service containers aren't available
          brew services start postgresql@14 || true
          sleep 3
          createuser -s postgres || true
          psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';" postgres || true
          createdb -U postgres raxol_test || true

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Setup Mix and Rebar
        run: |
          mix local.hex --force
          mix local.rebar --force
          # Show versions for debugging
          echo "Elixir version: $(elixir --version)"
          echo "Mix version: $(mix --version)"
          echo "Rebar3 version: $(~/.mix/elixir/*/rebar3 --version || echo 'rebar3 not found')"

      - name: Install Mix Dependencies
        run: |
          # Set environment variables for verbose output
          export DIAGNOSTIC=1
          export ERL_COMPILER_OPTIONS=bin_opt_info

          # Get dependencies
          mix deps.get

          # Handle problematic dependencies
          echo "Explicitly compiling ranch with --force"
          mix deps.compile ranch --force

          # Compile other dependencies
          mix deps.compile
        env:
          MIX_ENV: test

      - name: Install npm dependencies in subfolders
        run: |
          # Install npm dependencies in extensions/vscode if package.json exists
          if [ -f "extensions/vscode/package.json" ]; then
            echo "Installing npm dependencies in extensions/vscode"
            cd extensions/vscode && npm install && cd ../..
          fi

          # Install npm dependencies in frontend if package.json exists
          if [ -f "frontend/package.json" ]; then
            echo "Installing npm dependencies in frontend"
            cd frontend && npm install && cd ..
          fi

          # Install npm dependencies in assets if package.json exists
          if [ -f "assets/package.json" ]; then
            echo "Installing npm dependencies in assets"
            cd assets && npm install && cd ..
          fi

      - name: Wait for PostgreSQL (Linux only)
        if: runner.os == 'Linux'
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 15432; then
              break
            fi
            echo "Waiting for PostgreSQL to be ready... ($i/30)"
            sleep 1
          done

      - name: Run Tests
        run: |
          # Run tests with coverage and performance monitoring
          mix test --cover --slowest 10
        env:
          MIX_ENV: test
          RAXOL_ENV: test
          RAXOL_HEADLESS: true
          RAXOL_USE_MOCK_TERMBOX: true
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 15432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          TERM: xterm-256color
          PLATFORM: ${{ runner.os }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cover/excoveralls.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Run security scan only for Linux runners (using container action)
      - name: Run Security Scan on Linux
        uses: snyk/actions/node@master
        if: runner.os == 'Linux'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # For macOS, use Snyk CLI setup action instead of Docker-based action
      - name: Setup Snyk CLI on macOS
        uses: snyk/actions/setup@master
        if: runner.os == 'macOS'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Run simplified Snyk scan on macOS
      - name: Run Security Scan on macOS
        if: runner.os == 'macOS'
        continue-on-error: true
        run: snyk test --severity-threshold=high || echo "Snyk found issues but continuing"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "26.0"
          elixir-version: "1.15.7"

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check Formatting
        run: mix format --check-formatted

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0"
          elixir-version: "1.14"

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Generate Docs
        run: mix docs
