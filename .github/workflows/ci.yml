name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test-linux:
    name: Test (Elixir 1.17.3 | OTP 27.0 | ubuntu-latest)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-
            ${{ runner.os }}-mix-

      # OS-specific dependencies
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf m4 libncurses5-dev \
            libssl-dev libwxgtk3.2-dev libgl1-mesa-dev libglu1-mesa-dev \
            libpng-dev openssl

      - name: Check Docker Availability  
        if: runner.os == 'macOS'
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Docker is not available on macOS runner"
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Install macOS Dependencies and Setup PostgreSQL
        if: runner.os == 'macOS'
        run: |
          brew install openssl@1.1 postgresql@14
          echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

          # Set up PostgreSQL locally on macOS since service containers aren't available
          brew services start postgresql@14 || true
          sleep 5
          createuser -s postgres || true
          psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';" postgres || true
          createdb -U postgres raxol_test || true
          
          # Verify PostgreSQL is running
          pg_isready -h localhost || echo "PostgreSQL may not be ready yet"


      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27.0"
          elixir-version: "1.17.3"

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Setup Mix and Rebar
        run: |
          mix local.hex --force
          mix local.rebar --force
          # Show versions for debugging
          echo "Elixir version: $(elixir --version)"
          echo "Mix version: $(mix --version)"
          echo "Rebar3 version: $(~/.mix/elixir/*/rebar3 --version || echo 'rebar3 not found')"

      - name: Install Mix Dependencies
        run: |
          mix deps.get
          mix deps.compile
        env:
          MIX_ENV: test

      - name: Install npm dependencies in subfolders
        run: |
          # Install npm dependencies in extensions/vscode if package.json exists
          if [ -f "extensions/vscode/package.json" ]; then
            echo "Installing npm dependencies in extensions/vscode"
            cd extensions/vscode && npm install && cd ../..
          fi

          # Install npm dependencies in frontend if package.json exists
          if [ -f "frontend/package.json" ]; then
            echo "Installing npm dependencies in frontend"
            cd frontend && npm install && cd ..
          fi

          # Install npm dependencies in assets if package.json exists
          if [ -f "@static/package.json" ]; then
            echo "Installing npm dependencies in assets"
            cd assets && npm install && cd ..
          fi

      - name: Wait for PostgreSQL (Linux only)
        if: runner.os == 'Linux'
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 15432; then
              break
            fi
            echo "Waiting for PostgreSQL to be ready... ($i/30)"
            sleep 1
          done

      - name: Ensure Cowlib App File
        run: |
          if [ ! -f "deps/cowlib/ebin/cowlib.app" ] && [ -f "deps/cowlib/src/cowlib.app.src" ]; then
            echo "Manually copying cowlib.app.src to cowlib.app as a fallback"
            mkdir -p deps/cowlib/ebin
            cp deps/cowlib/src/cowlib.app.src deps/cowlib/ebin/cowlib.app
            echo "Modified cowlib.app content:"
            cat deps/cowlib/ebin/cowlib.app
          fi

      - name: Compile with Zero Warnings Check
        run: |
          mix compile --warnings-as-errors
        env:
          MIX_ENV: test
          SKIP_TERMBOX2_TESTS: true

      # Temporarily disabled - causing CI hangs
      # - name: Validate Module Structure
      #   run: |
      #     export TMPDIR=/tmp
      #     chmod +x scripts/ci_validate_structure.sh
      #     ./scripts/ci_validate_structure.sh
      #   env:
      #     MIX_ENV: test
      #     TMPDIR: /tmp
      #     SKIP_TERMBOX2_TESTS: true

      - name: Run Tests
        run: |
          mix coveralls.json --max-cases 4 --slowest 10
        env:
          MIX_ENV: test
          RAXOL_ENV: test
          RAXOL_HEADLESS: true
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 15432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          TERM: xterm-256color
          PLATFORM: ${{ runner.os }}

      - name: Run Credo
        run: |
          mix credo --strict
        env:
          MIX_ENV: test

      # Upload coverage reports to Codecov
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cover/excoveralls.json
          flags: unittests
          name: raxol-coverage
          fail_ci_if_error: false

      # Run security scan only for Linux runners (using container action)
      - name: Run Security Scan on Linux
        uses: snyk/actions/node@master
        if: runner.os == 'Linux'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # For macOS, directly use npm-installed Snyk CLI to avoid Docker entirely
      - name: Security Scan on macOS
        if: runner.os == 'macOS'
        run: |
          # Install Snyk CLI via npm
          echo "Installing Snyk CLI via npm..."
          npm install -g snyk

          # Run the security scan
          echo "Running Snyk without Docker dependencies..."
          snyk test --severity-threshold=high || echo "Snyk found issues but continuing"
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test-macos:
    name: Test (Elixir 1.17.3 | OTP 27.0 | macos-latest)
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-mix-27.0-1.17.3-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-27.0-1.17.3-
            ${{ runner.os }}-mix-

      - name: Check Docker Availability
        id: check_docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Docker is not available on macOS runner"
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Install macOS Dependencies and Setup PostgreSQL
        run: |
          brew install openssl@1.1 postgresql@14
          echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

          # Set up PostgreSQL locally on macOS since service containers aren't available
          brew services start postgresql@14 || true
          sleep 5
          createuser -s postgres || true
          psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';" postgres || true
          createdb -U postgres raxol_test || true
          
          # Verify PostgreSQL is running
          pg_isready -h localhost || echo "PostgreSQL may not be ready yet"

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27.0"
          elixir-version: "1.17.3"

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Setup Mix and Rebar
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Install Mix Dependencies
        run: |
          mix deps.get
          mix deps.compile

      - name: Install npm dependencies in subfolders
        run: |
          for dir in scripts/docs vscode-raxol; do
            if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
              echo "Installing npm dependencies in $dir"
              (cd "$dir" && npm install)
            fi
          done

      - name: Ensure Cowlib App File
        run: |
          if [ ! -f "deps/cowlib/ebin/cowlib.app" ]; then
            echo "Fixing cowlib..."
            (cd deps/cowlib && mix compile)
          fi

      - name: Compile with Zero Warnings Check
        run: |
          mix compile --warnings-as-errors
        env:
          MIX_ENV: test
          SKIP_TERMBOX2_TESTS: true

      # Temporarily disabled - causing CI hangs
      # - name: Validate Module Structure
      #   run: |
      #     export TMPDIR=/tmp
      #     chmod +x scripts/ci_validate_structure.sh
      #     ./scripts/ci_validate_structure.sh
      #   env:
      #     MIX_ENV: test
      #     TMPDIR: /tmp
      #     SKIP_TERMBOX2_TESTS: true

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL to be ready... ($i/30)"
            sleep 1
          done

      - name: Run Tests
        run: |
          mix test --cover
        env:
          MIX_ENV: test
          RAXOL_ENV: test
          RAXOL_HEADLESS: true
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/raxol_test
          CI: true
          SKIP_TERMBOX2_TESTS: true
          TERM: xterm-256color
          PLATFORM: macOS

      - name: Run Credo
        run: mix credo --strict
        continue-on-error: true

      - name: Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: ./cover/coverage.xml
          flags: unittests
          name: codecov-${{ runner.os }}
          fail_ci_if_error: false

      # Use npm-installed Snyk CLI on macOS to avoid Docker dependencies
      - name: Security Scan on macOS
        if: env.SNYK_TOKEN != ''
        run: |
          # Install Snyk CLI via npm
          echo "Installing Snyk CLI via npm..."
          npm install -g snyk
          
          # Authenticate with Snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          
          # Run the security scan
          echo "Running Snyk security scan..."
          snyk test --severity-threshold=high || echo "Snyk found issues but continuing"
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27.0"
          elixir-version: "1.17.3"

      - name: Check Docker Availability
        id: check_docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Docker is not available, skipping Docker-dependent tests"
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check Formatting
        run: mix format --check-formatted
        env:
          # Skip termbox2 tests if Docker is not available
          SKIP_TERMBOX2_TESTS: ${{ env.DOCKER_AVAILABLE == 'false' }}

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev openssl

      - name: Set up Python 3.11 # Pin Python for rrex_termbox compatibility
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Set up Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27.0"
          elixir-version: "1.17.3"

      - name: Check Docker Availability
        id: check_docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Docker is not available, skipping Docker-dependent tests"
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Install Mix Dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Generate Docs
        run: mix docs
        env:
          # Skip termbox2 tests if Docker is not available
          SKIP_TERMBOX2_TESTS: ${{ env.DOCKER_AVAILABLE == 'false' }}
