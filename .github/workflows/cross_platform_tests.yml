name: Cross-Platform Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual trigger"
        required: true
        default: "Manual verification"

jobs:
  test:
    name: Test Raxol on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        elixir: ["1.15.7"]
        otp: ["26.0"]
        include:
          - os: ubuntu-latest
            platform: linux
            terminal: gnome-terminal
          - os: macos-latest
            platform: macos
            terminal: iterm2
          - os: windows-latest
            platform: windows
            terminal: windows-terminal

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache Mix dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Handle Linux-specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf m4 libncurses5-dev \
            libssl-dev libwxgtk3.2-dev libgl1-mesa-dev libglu1-mesa-dev \
            libpng-dev openssl

      # Handle macOS-specific dependencies
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install openssl@1.1
          echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

      # Handle Windows-specific dependencies
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install openssl

      - name: Check Docker Availability
        id: check_docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "Docker is not available, skipping Docker-dependent tests"
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
          mix deps.compile
          npm ci

      # Database setup for testing
      - name: Set up PostgreSQL for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y postgresql postgresql-contrib
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          sudo -u postgres psql -c "CREATE DATABASE raxol_test;"

      - name: Set up PostgreSQL for macOS
        if: runner.os == 'macOS'
        run: |
          brew services start postgresql@14
          sleep 3
          createuser -s postgres || true
          psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';" postgres || true
          createdb -U postgres raxol_test || true

      - name: Run unit tests
        run: mix test test/raxol --cover
        env:
          MIX_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          TERM: xterm-256color
          # Skip termbox2 tests if Docker is not available
          SKIP_TERMBOX2_TESTS: ${{ env.DOCKER_AVAILABLE == 'false' }}

      - name: Run integration tests
        run: mix test test/integration --cover
        env:
          MIX_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          TERM: xterm-256color
          # Skip termbox2 tests if Docker is not available
          SKIP_TERMBOX2_TESTS: ${{ env.DOCKER_AVAILABLE == 'false' }}

      - name: Run cross-platform specific tests
        run: mix test test/platform --cover
        env:
          MIX_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raxol_test
          PLATFORM: ${{ matrix.platform }}
          TERM: xterm-256color
          # Skip termbox2 tests if Docker is not available
          SKIP_TERMBOX2_TESTS: ${{ env.DOCKER_AVAILABLE == 'false' }}

      - name: Verify terminal compatibility
        run: mix run test/platform/verify_terminal_compatibility.exs
        env:
          TERM: xterm-256color
          COLORTERM: truecolor
          PLATFORM: ${{ matrix.platform }}

      - name: Build test binary
        run: mix run scripts/release.exs --env test --platform ${{ matrix.platform }}
        env:
          MIX_ENV: test

      - name: Test binary functionality
        run: |
          cd burrito_out/test
          ./raxol --test-mode --verify-features

      - name: Run platform-specific tests
        run: |
          case ${{ matrix.platform }} in
            linux)
              # Test X11/Wayland support
              xeyes &
              sleep 2
              pkill xeyes
              ;;
            macos)
              # Test macOS specific features
              osascript -e 'display notification "Test" with title "Raxol Test"'
              ;;
            windows)
              # Test Windows specific features
              powershell -Command "Write-Host 'Windows Test'"
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.platform }}
          path: |
            _build/test/results
            cover/excoveralls.json
            test/platform/verify_terminal_compatibility.exs.log

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: runner.os == 'Linux'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cover/excoveralls.json
          flags: cross-platform-${{ matrix.platform }}
          name: codecov-${{ matrix.platform }}
          fail_ci_if_error: false

      # Alternative for macOS - save coverage data without uploading
      - name: Process coverage data (macOS/Windows)
        if: runner.os != 'Linux'
        run: |
          echo "Coverage data available for ${{ matrix.platform }}, but skipping codecov upload (Docker issues)."

      - name: Generate test report
        if: always()
        run: |
          echo "=== Test Report for ${{ matrix.platform }} ===" > test-report-${{ matrix.platform }}.txt
          echo "Platform: ${{ matrix.platform }}" >> test-report-${{ matrix.platform }}.txt
          echo "Terminal: ${{ matrix.terminal }}" >> test-report-${{ matrix.platform }}.txt
          echo "Test Results:" >> test-report-${{ matrix.platform }}.txt
          cat _build/test/results/terminal_*.log >> test-report-${{ matrix.platform }}.txt

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ matrix.platform }}
          path: test-report-${{ matrix.platform }}.txt
