name: 'Run Raxol Tests'
description: 'Run tests with proper configuration and coverage'

inputs:
  test-type:
    description: 'Type of tests to run (unit, integration, property, all)'
    required: false
    default: 'all'
  coverage:
    description: 'Enable coverage reporting'
    required: false
    default: 'true'
  partition:
    description: 'Test partition number for parallel execution'
    required: false
    default: '1'
  max-failures:
    description: 'Maximum test failures before stopping'
    required: false
    default: '10'

outputs:
  coverage-file:
    description: 'Path to coverage file'
    value: ${{ steps.test.outputs.coverage-file }}
  test-results:
    description: 'Test results summary'
    value: ${{ steps.test.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Prepare test environment
      shell: bash
      run: |
        echo "Setting up test environment..."
        export TMPDIR=/tmp
        export MIX_ENV=test
        export SKIP_TERMBOX2_TESTS=true
    
    - name: Run tests
      id: test
      shell: bash
      run: |
        TEST_ARGS=""
        COVERAGE_ARGS=""
        
        # Configure test type
        case "${{ inputs.test-type }}" in
          unit)
            TEST_ARGS="--exclude integration --exclude property --exclude slow"
            ;;
          integration)
            TEST_ARGS="--only integration"
            ;;
          property)
            TEST_ARGS="test/property"
            ;;
          all)
            TEST_ARGS=""
            ;;
        esac
        
        # Configure coverage
        if [ "${{ inputs.coverage }}" == "true" ]; then
          COVERAGE_ARGS="--cover --export-coverage ${{ inputs.test-type }}"
          echo "coverage-file=cover/${{ inputs.test-type }}.coverdata" >> $GITHUB_OUTPUT
        fi
        
        # Run tests
        mix test $TEST_ARGS $COVERAGE_ARGS \
          --max-failures ${{ inputs.max-failures }} \
          --trace \
          2>&1 | tee test-output.log
        
        # Extract results
        RESULTS=$(tail -n 5 test-output.log | head -n 2)
        echo "results=$RESULTS" >> $GITHUB_OUTPUT
      env:
        MIX_ENV: test
        MIX_TEST_PARTITION: ${{ inputs.partition }}
        SKIP_TERMBOX2_TESTS: true
        TMPDIR: /tmp
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ inputs.test-type }}-${{ inputs.partition }}
        path: |
          test-output.log
          _build/test/lib/*/test-results.xml
        retention-days: 7