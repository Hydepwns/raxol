{
  "name": "Raxol",
  "scopeName": "source.raxol",
  "fileTypes": ["rx", "raxol"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#raxol-components"
    },
    {
      "include": "#raxol-props"
    },
    {
      "include": "#raxol-events"
    },
    {
      "include": "#raxol-styles"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#atoms"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#elixir-base"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.raxol",
          "begin": "#",
          "end": "$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.raxol",
          "match": "\\b(defcomponent|render|update|init|handle_event|handle_info|mount|unmount|assign|push_event)\\b"
        },
        {
          "name": "keyword.other.raxol",
          "match": "\\b(props|state|context|children|slot|socket)\\b"
        }
      ]
    },
    "raxol-components": {
      "patterns": [
        {
          "name": "entity.name.tag.raxol",
          "match": "\\b(Text|Heading|Label|Button|Input|TextArea|Select|Checkbox|Radio|Toggle|Box|Flex|Grid|List|Table|Modal|Tooltip|Spinner|ProgressBar|Tabs|Menu|Dropdown|Card|Panel|Window|Terminal|Buffer|Screen|Canvas|Chart|Graph)\\b"
        },
        {
          "name": "entity.name.tag.custom.raxol",
          "match": "\\b[A-Z][a-zA-Z0-9_]*Component\\b"
        }
      ]
    },
    "raxol-props": {
      "patterns": [
        {
          "name": "variable.parameter.raxol",
          "match": "\\b(id|class|style|width|height|x|y|color|background|border|padding|margin|text|content|value|placeholder|disabled|readonly|required|selected|checked|visible|hidden|theme|variant|size|align|justify|direction|wrap|gap|rows|cols|min|max|step|pattern|title|label|description|href|target|src|alt|type|name|method|action|encoding|multiple|accept|capture|form|list|options|default|initial|current|active|hover|focus|error|loading|success|warning|info|primary|secondary|danger|safe|interactive|static|dynamic)\\b"
        }
      ]
    },
    "raxol-events": {
      "patterns": [
        {
          "name": "entity.name.function.event.raxol",
          "match": "\\b(on_click|on_change|on_input|on_focus|on_blur|on_submit|on_reset|on_load|on_error|on_key|on_keydown|on_keyup|on_keypress|on_mouse|on_mousedown|on_mouseup|on_mousemove|on_mouseenter|on_mouseleave|on_drag|on_drop|on_scroll|on_resize|on_mount|on_unmount|on_update|on_render)\\b"
        }
      ]
    },
    "raxol-styles": {
      "patterns": [
        {
          "name": "entity.other.attribute-name.css.raxol",
          "match": "\\b(bold|italic|underline|strikethrough|blink|reverse|bright|dim|hidden|protected|crossedout|faint|doubly_underlined|not_bold|not_italic|not_underlined|not_blinking|not_reverse|not_crossed_out|not_faint|not_doubly_underlined|normal_color|normal_intensity|primary_font|alternative_font_1|alternative_font_2|alternative_font_3|alternative_font_4|alternative_font_5|alternative_font_6|alternative_font_7|alternative_font_8|alternative_font_9|fraktur|not_fraktur|framed|encircled|overlined|not_framed_not_encircled|not_overlined)\\b"
        },
        {
          "name": "support.constant.color.raxol",
          "match": "\\b(black|red|green|yellow|blue|magenta|cyan|white|light_black|light_red|light_green|light_yellow|light_blue|light_magenta|light_cyan|light_white|default)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.raxol",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.raxol",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.raxol",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.raxol",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.raxol",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "atoms": {
      "patterns": [
        {
          "name": "constant.other.symbol.raxol",
          "match": ":[a-zA-Z_][a-zA-Z0-9_]*[?!]?"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.raxol",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.raxol",
          "match": "\\b[a-z_][a-zA-Z0-9_]*[?!]?(?=\\s*\\()"
        }
      ]
    },
    "elixir-base": {
      "patterns": [
        {
          "name": "keyword.control.elixir",
          "match": "\\b(def|defp|defmodule|defprotocol|defimpl|defmacro|defmacrop|defdelegate|defexception|defstruct|if|unless|case|cond|receive|try|with|for|do|end|else|elsif|rescue|after|catch)\\b"
        },
        {
          "name": "storage.type.elixir",
          "match": "\\b(alias|import|require|use)\\b"
        }
      ]
    }
  }
}