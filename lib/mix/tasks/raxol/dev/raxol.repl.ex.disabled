defmodule Mix.Tasks.Raxol.Repl do
  use Mix.Task

  @shortdoc "Start Raxol Interactive REPL"

  @moduledoc """
  Interactive REPL (Read-Eval-Print Loop) for Raxol components and APIs.

  Provides an enhanced IEx session with Raxol-specific helpers, component testing,
  and inline documentation examples.

  ## Usage

      mix raxol.repl
      mix raxol.repl --mode terminal
      mix raxol.repl --mode web --port 4000
      
  ## Modes

  * `terminal` - Terminal-based REPL with syntax highlighting (default)
  * `web` - Web-based REPL with rich UI and component preview

  ## Options

  * `--mode` - REPL mode (terminal, web)
  * `--port` - Port for web mode (default: 4444)
  * `--theme` - Color theme (default, dark, light)
  * `--preload` - Modules to preload (comma-separated)

  ## Features

  * Raxol component helpers and shortcuts
  * Inline documentation with examples
  * Component preview and testing
  * Performance profiling helpers
  * Auto-completion for Raxol APIs
  * Historical command replay
  * Export session as Elixir script

  ## Examples

      # Start terminal REPL
      mix raxol.repl
      
      # Start web REPL on custom port
      mix raxol.repl --mode web --port 8080
      
      # Preload specific modules
      mix raxol.repl --preload "MyApp.Component,MyApp.Helper"
  """

  @impl true
  def run(args) do
    {opts, _, _} =
      OptionParser.parse(args,
        switches: [
          mode: :string,
          port: :integer,
          theme: :string,
          preload: :string,
          help: :boolean
        ],
        aliases: [
          m: :mode,
          p: :port,
          t: :theme,
          h: :help
        ]
      )

    if opts[:help] do
      show_help()
    else
      start_repl(opts)
    end
  end

  defp start_repl(opts) do
    mode = Keyword.get(opts, :mode, "terminal")
    port = Keyword.get(opts, :port, 4444)
    theme = Keyword.get(opts, :theme, "default")
    preload = parse_preload_modules(Keyword.get(opts, :preload))

    Mix.shell().info("Starting Raxol Interactive REPL...")
    Mix.shell().info("Mode: #{mode} | Theme: #{theme}")

    # Ensure Raxol is started
    Application.ensure_all_started(:raxol)

    # Preload modules
    preload_modules(preload)

    case mode do
      "web" ->
        start_web_repl(port, theme, opts)

      "terminal" ->
        start_terminal_repl(theme, opts)

      _ ->
        Mix.shell().error("Unknown mode: #{mode}. Use 'terminal' or 'web'")
        System.halt(1)
    end
  end

  defp start_terminal_repl(theme, _opts) do
    Mix.shell().info("Starting terminal REPL with theme: #{theme}")

    # Setup IEx with Raxol helpers
    setup_iex_helpers()

    # Configure terminal colors based on theme
    configure_terminal_theme(theme)

    # Start enhanced IEx session
    IEx.configure(
      colors: get_theme_colors(theme),
      default_prompt: get_custom_prompt(),
      history_size: 1000,
      inspect: [
        pretty: true,
        width: 120,
        limit: 50,
        printable_limit: 4096
      ]
    )

    # Print welcome message
    print_repl_welcome()

    # Start IEx
    IEx.start()
  end

  defp start_web_repl(port, _theme, _opts) do
    Mix.shell().info("Starting web REPL on port #{port}")

    # Start the playground with web mode
    case Raxol.Playground.launch(port: port, web: true) do
      :ok ->
        Mix.shell().info("Web REPL available at: http://localhost:#{port}")
        :timer.sleep(:infinity)

      {:error, reason} ->
        Mix.shell().error("Failed to start web REPL: #{inspect(reason)}")
        System.halt(1)
    end
  end

  defp setup_iex_helpers do
    # Import common Raxol modules
    # Note: Raxol.UI and Raxol.Component are available in the IEx session
    # You can use them directly without importing

    # Add custom helpers
    defmodule ReplHelpers do
      @doc "List all available Raxol components"
      def components do
        Raxol.Playground.get_catalog()
        |> Enum.map(fn comp ->
          "#{comp.id} - #{comp.description}"
        end)
        |> Enum.join("\n")
        |> IO.puts()
      end

      @doc "Preview a component by ID"
      def preview(component_id) do
        case Raxol.Playground.select_component(component_id) do
          {:ok, preview} -> IO.puts(preview)
          {:error, reason} -> IO.puts("Error: #{reason}")
        end
      end

      @doc "Benchmark a function call"
      def bench(fun) when is_function(fun) do
        {time, result} = :timer.tc(fun)
        IO.puts("Execution time: #{time}μs")
        result
      end

      @doc "Profile memory usage of a function"
      def profile_memory(fun) when is_function(fun) do
        before = :erlang.memory()
        result = fun.()
        after_mem = :erlang.memory()

        total_diff = after_mem[:total] - before[:total]
        process_diff = after_mem[:processes] - before[:processes]

        IO.puts(
          "Memory delta: #{total_diff} bytes total, #{process_diff} bytes processes"
        )

        result
      end

      @doc "Generate component code"
      def generate_component(name, props \\ %{}) do
        code = """
        defmodule #{name} do
          use Raxol.UI, framework: :universal
          
          def render(assigns) do
            ~H\"\"\"
            <div>
              <!-- Component content here -->
            </div>
            \"\"\"
          end
        end
        """

        IO.puts(code)
        :ok
      end

      @doc "Show Raxol performance tips"
      def perf_tips do
        tips = [
          "Use binary pattern matching for ANSI parsing",
          "Minimize GenServer calls in render loops",
          "Cache expensive calculations with ETS",
          "Use tail recursion for large data processing",
          "Profile with :fprof and :eprof for hotspots",
          "Consider process pooling for concurrent operations"
        ]

        IO.puts("🚀 Raxol Performance Tips:")
        Enum.each(tips, fn tip -> IO.puts("  • #{tip}") end)
      end

      @doc "Show keyboard shortcuts"
      def shortcuts do
        shortcuts = [
          "Ctrl+C, Ctrl+C - Exit REPL",
          "Ctrl+G - Job control mode",
          "Tab - Auto-completion",
          "Ctrl+R - Reverse search history",
          "v() - Get last result",
          "h(module) - Show help"
        ]

        IO.puts("⌨️  REPL Shortcuts:")
        Enum.each(shortcuts, fn shortcut -> IO.puts("  • #{shortcut}") end)
      end
    end

    # Note: ReplHelpers is available in the IEx session without explicit import
  end

  defp configure_terminal_theme("dark") do
    # Configure for dark terminals
    IO.ANSI.format([:black_background, :white])
  end

  defp configure_terminal_theme("light") do
    # Configure for light terminals
    IO.ANSI.format([:white_background, :black])
  end

  defp configure_terminal_theme(_), do: :ok

  defp get_theme_colors("dark") do
    [
      syntax_colors: [
        number: :yellow,
        atom: :cyan,
        string: :green,
        boolean: :magenta,
        nil: :magenta
      ],
      eval_result: [:cyan, :bright],
      error: [:red, :bright],
      info: [:blue, :bright]
    ]
  end

  defp get_theme_colors("light") do
    [
      syntax_colors: [
        number: [:yellow, :bright],
        atom: [:cyan, :bright],
        string: [:green, :bright],
        boolean: [:magenta, :bright],
        nil: [:magenta, :bright]
      ],
      eval_result: [:blue, :bright],
      error: [:red, :bright],
      info: [:blue, :bright]
    ]
  end

  defp get_theme_colors(_), do: IEx.Config.color(:enabled)

  defp get_custom_prompt do
    fn
      %{counter: counter} ->
        "#{IO.ANSI.blue()}raxol(#{counter})>#{IO.ANSI.reset()} "
    end
  end

  defp print_repl_welcome do
    IO.puts("""
    #{IO.ANSI.cyan()}
    ╔══════════════════════════════════════════════════════╗
    ║            Raxol Interactive REPL 🧪                 ║
    ║                                                      ║
    ║  Enhanced IEx with Raxol helpers and shortcuts      ║
    ╚══════════════════════════════════════════════════════╝
    #{IO.ANSI.reset()}

    #{IO.ANSI.green()}Available helpers:#{IO.ANSI.reset()}
      • #{IO.ANSI.yellow()}components()#{IO.ANSI.reset()} - List all components
      • #{IO.ANSI.yellow()}preview("component_id")#{IO.ANSI.reset()} - Preview component
      • #{IO.ANSI.yellow()}bench(fn -> ... end)#{IO.ANSI.reset()} - Benchmark function
      • #{IO.ANSI.yellow()}profile_memory(fn -> ... end)#{IO.ANSI.reset()} - Profile memory
      • #{IO.ANSI.yellow()}generate_component("MyComponent")#{IO.ANSI.reset()} - Generate code
      • #{IO.ANSI.yellow()}perf_tips()#{IO.ANSI.reset()} - Show performance tips
      • #{IO.ANSI.yellow()}shortcuts()#{IO.ANSI.reset()} - Show keyboard shortcuts

    #{IO.ANSI.green()}Quick start:#{IO.ANSI.reset()}
      Try: #{IO.ANSI.yellow()}components()#{IO.ANSI.reset()} to see available components
      Or:  #{IO.ANSI.yellow()}preview("button")#{IO.ANSI.reset()} to test a component

    #{IO.ANSI.light_black()}Type 'shortcuts()' for keyboard shortcuts#{IO.ANSI.reset()}
    """)
  end

  defp parse_preload_modules(nil), do: []

  defp parse_preload_modules(modules_str) do
    modules_str
    |> String.split(",")
    |> Enum.map(&String.trim/1)
    |> Enum.reject(&(&1 == ""))
  end

  defp preload_modules([]), do: :ok

  defp preload_modules(modules) do
    Mix.shell().info("Preloading modules: #{Enum.join(modules, ", ")}")

    Enum.each(modules, fn module_name ->
      try do
        module = String.to_existing_atom("Elixir.#{module_name}")
        Code.ensure_loaded(module)
        Mix.shell().info("  ✓ #{module_name}")
      rescue
        ArgumentError ->
          Mix.shell().error("  ✗ #{module_name} (not found)")
      end
    end)
  end

  defp show_help do
    Mix.shell().info("""
    Raxol Interactive REPL

    Start an enhanced IEx session with Raxol helpers and component testing.

    USAGE:
        mix raxol.repl [OPTIONS]

    OPTIONS:
        -m, --mode MODE      REPL mode: terminal (default) or web
        -p, --port PORT      Port for web mode (default: 4444)  
        -t, --theme THEME    Color theme: default, dark, light
        --preload MODULES    Comma-separated list of modules to preload
        -h, --help           Show this help

    EXAMPLES:
        mix raxol.repl
        mix raxol.repl --mode web --port 8080
        mix raxol.repl --theme dark --preload "MyApp.Component"
        
    TERMINAL MODE:
        Enhanced IEx with Raxol helpers, syntax highlighting, and shortcuts
        
    WEB MODE:
        Browser-based REPL with component preview and visual editor
        Available at http://localhost:PORT after startup
    """)
  end
end
