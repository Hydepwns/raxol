defmodule Mix.Tasks.Raxol.Check.Compile do
  @moduledoc """
  Check for compilation warnings.

  Ensures zero warnings policy is maintained.
  """

  use Mix.Task

  @shortdoc "Check for compilation warnings"

  @impl Mix.Task
  def run(config \\ %{}) do
    verbose = Map.get(config, :verbose, false)

    # Set required environment variables
    System.put_env("SKIP_TERMBOX2_TESTS", "true")
    System.put_env("TMPDIR", "/tmp")

    if verbose, do: IO.puts("  Compiling with warnings as errors...")

    env = [
      {"MIX_ENV", "test"},
      {"SKIP_TERMBOX2_TESTS", "true"},
      {"TMPDIR", "/tmp"}
    ]

    case System.cmd("mix", ["compile", "--warnings-as-errors"],
           stderr_to_stdout: true,
           env: env
         ) do
      {_, 0} ->
        {:ok, "Zero compilation warnings"}

      {output, _exit_code} ->
        handle_compilation_failure(output, config)
    end
  end

  defp handle_compilation_failure(output, config) do
    if String.contains?(output, "Could not compile with \"make\"") do
      # NIF build failure is not a warning issue
      if Map.get(config, :verbose, false) do
        {:warning, "NIF build failed (not a warning issue)"}
      else
        {:ok, "Zero compilation warnings (NIF build skipped)"}
      end
    else
      # Real compilation warnings
      warnings = parse_warnings(output)
      message = format_warning_message(warnings, output)
      {:error, message}
    end
  end

  defp parse_warnings(output) do
    output
    |> String.split("\n")
    |> Enum.filter(&String.contains?(&1, "warning:"))
    |> Enum.map(&extract_warning_info/1)
    |> Enum.reject(&is_nil/1)
  end

  defp extract_warning_info(line) do
    case Regex.run(~r/(.+?):(\d+):\s*warning:\s*(.+)/, line) do
      [_, file, line_num, message] ->
        %{
          file: String.trim(file),
          line: String.to_integer(line_num),
          message: String.trim(message)
        }

      _ ->
        # Fallback for warnings without file:line format
        if String.contains?(line, "warning:") do
          %{file: "unknown", line: 0, message: String.trim(line)}
        else
          nil
        end
    end
  end

  defp format_warning_message([], output) do
    # No specific warnings parsed, show raw output
    lines =
      output
      |> String.split("\n")
      |> Enum.filter(&String.contains?(&1, "warning"))
      |> Enum.take(10)

    """
    Compilation warnings detected:
    #{Enum.join(lines, "\n")}

    Run: mix compile --warnings-as-errors
    """
  end

  defp format_warning_message(warnings, _output) do
    grouped = Enum.group_by(warnings, & &1.file)

    details =
      Enum.map_join(grouped, "\n", fn {file, file_warnings} ->
        warning_list =
          Enum.map_join(file_warnings, "\n", fn w ->
            "    Line #{w.line}: #{w.message}"
          end)

        "  #{file}:\n#{warning_list}"
      end)

    """
    Found #{length(warnings)} compilation warning(s):

    #{details}

    Run: mix compile --warnings-as-errors
    """
  end
end
