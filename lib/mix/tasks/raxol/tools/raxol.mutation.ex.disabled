defmodule Mix.Tasks.Raxol.Mutation do
  @moduledoc """
  Run mutation tests on Raxol codebase.

  Mutation testing helps evaluate the quality of your test suite by introducing
  small bugs (mutations) into your code and checking if your tests catch them.

  ## Usage

      mix raxol.mutation [options]
      
  ## Options

    * `--paths` - Comma-separated list of paths to mutate (default: core modules)
    * `--max-mutations` - Maximum number of mutations to generate (default: 100)  
    * `--timeout` - Timeout per test run in milliseconds (default: 30000)
    * `--only-living` - Only report mutations that survive tests (default: true)
    * `--verbose` - Show detailed progress (default: false)
    * `--quick` - Run a quick mutation test on parser only (default: false)

  ## Examples

      # Quick mutation test on parser only
      mix raxol.mutation --quick
      
      # Full mutation test with custom options
      mix raxol.mutation --max-mutations 500 --verbose
      
      # Test specific paths
      mix raxol.mutation --paths lib/raxol/terminal/ansi,lib/raxol/core
      
  ## Performance Notes

  Mutation testing can be slow. The `--quick` option focuses on the parser
  which is performance-critical and well-tested.
  """

  use Mix.Task

  @shortdoc "Run mutation tests to evaluate test suite quality"

  @default_config [
    paths: [
      "lib/raxol/terminal/ansi/parser.ex",
      "lib/raxol/terminal/buffer/manager.ex",
      "lib/raxol/terminal/cursor/manager.ex",
      "lib/raxol/core/error_handler.ex"
    ],
    test_cmd:
      "mix test --exclude slow --exclude integration --exclude docker --max-failures 1",
    env: %{
      "SKIP_TERMBOX2_TESTS" => "true",
      "TMPDIR" => "/tmp",
      "MIX_ENV" => "test"
    },
    max_mutations: 100,
    timeout: 30_000,
    only_living: true,
    verbose: false
  ]

  @quick_config [
    paths: ["lib/raxol/terminal/ansi/parser.ex"],
    max_mutations: 50,
    timeout: 20_000,
    only_living: true,
    verbose: true
  ]

  @impl Mix.Task
  def run(args) do
    {opts, _} =
      OptionParser.parse!(args,
        strict: [
          paths: :string,
          max_mutations: :integer,
          timeout: :integer,
          only_living: :boolean,
          verbose: :boolean,
          quick: :boolean
        ]
      )

    config = build_config(opts)

    Mix.Shell.IO.info("🧬 Starting mutation testing...")
    Mix.Shell.IO.info("Paths: #{inspect(config[:paths])}")
    Mix.Shell.IO.info("Max mutations: #{config[:max_mutations]}")
    Mix.Shell.IO.info("Timeout: #{config[:timeout]}ms")
    Mix.Shell.IO.info("")

    # Ensure test environment
    unless Mix.env() == :test do
      Mix.Shell.IO.error("Mutation testing must run in test environment")
      Mix.Shell.IO.info("Run: MIX_ENV=test mix raxol.mutation")
      System.halt(1)
    end

    # Compile first
    Mix.Shell.IO.info("📦 Compiling...")
    Mix.Task.run("compile", ["--force"])

    # Run baseline tests to ensure they pass
    Mix.Shell.IO.info("🧪 Running baseline tests...")

    case Mix.Shell.IO.cmd(config[:test_cmd],
           env: config[:env],
           stderr_to_stdout: true
         ) do
      {_output, 0} ->
        Mix.Shell.IO.info("✅ Baseline tests pass")

      {output, exit_code} ->
        Mix.Shell.IO.error("❌ Baseline tests failed (exit: #{exit_code})")
        Mix.Shell.IO.info(output)
        Mix.Shell.IO.error("Fix tests before running mutation testing")
        System.halt(1)
    end

    # Generate mutations config file
    config_path = write_temp_config(config)

    try do
      # Run muzak with the generated config
      Mix.Shell.IO.info("🔬 Generating and testing mutations...")

      case System.cmd("mix", ["muzak", "--config", config_path],
             env: Map.to_list(config[:env]),
             into: IO.stream(:stdio, :line)
           ) do
        {_, 0} ->
          Mix.Shell.IO.info("✅ Mutation testing completed successfully")

        {_, exit_code} ->
          Mix.Shell.IO.error("❌ Mutation testing failed (exit: #{exit_code})")
          System.halt(exit_code)
      end
    after
      File.rm(config_path)
    end

    Mix.Shell.IO.info("🎯 Mutation testing complete!")

    Mix.Shell.IO.info(
      "Check the output above for surviving mutations that indicate weak tests."
    )
  end

  defp build_config(opts) do
    base_config = if opts[:quick], do: @quick_config, else: @default_config

    base_config
    |> update_if_present(opts, :paths, &parse_paths/1)
    |> update_if_present(opts, :max_mutations, & &1)
    |> update_if_present(opts, :timeout, & &1)
    |> update_if_present(opts, :only_living, & &1)
    |> update_if_present(opts, :verbose, & &1)
  end

  defp update_if_present(config, opts, key, transformer) do
    case Keyword.get(opts, key) do
      nil -> config
      value -> Keyword.put(config, key, transformer.(value))
    end
  end

  defp parse_paths(paths_string) do
    paths_string
    |> String.split(",")
    |> Enum.map(&String.trim/1)
    |> Enum.reject(&(&1 == ""))
  end

  defp write_temp_config(config) do
    config_content = inspect(config, pretty: true, limit: :infinity)

    config_path =
      Path.join(System.tmp_dir(), "muzak_config_#{:rand.uniform(10000)}.exs")

    File.write!(config_path, config_content)
    config_path
  end
end
